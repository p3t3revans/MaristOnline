"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return"guest"===role||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(app){app.registerModule("articles",["core"]),app.registerModule("articles.services"),app.registerModule("articles.routes",["ui.router","articles.services"])}(ApplicationConfiguration),function(app){app.registerModule("artists",["core"]),app.registerModule("artists.services"),app.registerModule("artists.routes",["ui.router","artists.services"])}(ApplicationConfiguration),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("core",[]),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("mediums",["core"]),app.registerModule("mediums.services"),app.registerModule("mediums.routes",["ui.router","mediums.services"])}(ApplicationConfiguration),function(app){app.registerModule("pictures",["core"]),app.registerModule("pictures.services"),app.registerModule("pictures.routes",["ui.router","pictures.services"])}(ApplicationConfiguration),function(app){app.registerModule("subjects",["core"]),app.registerModule("subjects.services"),app.registerModule("subjects.routes",["ui.router","subjects.services"])}(ApplicationConfiguration),function(app){app.registerModule("teachers",["core"]),app.registerModule("teachers.services"),app.registerModule("teachers.routes",["ui.router","teachers.services"])}(ApplicationConfiguration),function(app){app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.services"),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router"]),app.registerModule("users.admin.routes",["ui.router","users.admin.services"])}(ApplicationConfiguration),function(app){app.registerModule("years",["core"]),app.registerModule("years.services"),app.registerModule("years.routes",["ui.router","years.services"])}(ApplicationConfiguration),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Articles",state:"articles",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","articles",{title:"List Articles",state:"articles.list"}),Menus.addSubMenuItem("topbar","articles",{title:"Create Article",state:"articles.create",roles:["teach","admin"]})}angular.module("articles").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html",controller:"ArticlesListController",controllerAs:"vm",data:{pageTitle:"Articles List"}}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/form-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:newArticle},data:{roles:["teach","admin"],pageTitle:"Articles Create"}}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/form-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:getArticle},data:{roles:["teach","admin"],pageTitle:"Edit Article {{ articleResolve.title }}"}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:getArticle},data:{pageTitle:"Article {{ articleResolve.title }}"}})}function getArticle($stateParams,ArticlesService){return ArticlesService.get({articleId:$stateParams.articleId}).$promise}function newArticle(ArticlesService){return new ArticlesService}angular.module("articles.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArticle.$inject=["$stateParams","ArticlesService"],newArticle.$inject=["ArticlesService"]}(),function(){function ArticlesController($timeout,$scope,$state,article,$window,Authentication,FileUploader){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.article.$remove($state.go("articles.list"))}function save(isValid){function successCallback(res){$state.go("articles.view",{articleId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.article._id?vm.article.$update(successCallback,errorCallback):vm.article.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.articleForm"),!1)}function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fre){$timeout(function(){var sizePicture=Math.ceil(fre.target.result.length/1400);sizePicture>100?alert("Picture size is "+sizePicture+" KBs Max size is 100 KBs"):vm.article.picture=fre.target.result},0)}}}function onSuccessItem(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,cancelUpload()}function onErrorItem(fileItem,response,status,headers){cancelUpload(),vm.error=response.message}function cancelUpload(){vm.uploader.clearQueue(),vm.imageURL=vm.user.profileImageURL}var vm=this;vm.article=article,vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.cancelUpload=cancelUpload,vm.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}})}angular.module("articles").controller("ArticlesController",ArticlesController),ArticlesController.$inject=["$timeout","$scope","$state","articleResolve","$window","Authentication","FileUploader"]}(),function(){function ArticlesListController(ArticlesList,$scope){var vm=this;vm.wait=!0,$scope.maxSize=5,$scope.totalItems=0,$scope.currentPage=1,$scope.pageChanged=function(){vm.articles=ArticlesList.get({page:$scope.currentPage,count:$scope.totalItems}),vm.articles.$promise.then(function(result){vm.wait=!0,vm.articles=result.articles,-1!==result.count&&($scope.totalItems=result.count),vm.wait=!1})},$scope.pageChanged()}angular.module("articles").controller("ArticlesListController",ArticlesListController),ArticlesListController.$inject=["ArticlesList","$scope"]}(),function(){function ArticlesService($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}angular.module("articles.services").factory("ArticlesService",ArticlesService),ArticlesService.$inject=["$resource"]}(),angular.module("articles").factory("ArticlesFrontPage",["$resource",function($resource){return $resource("api/articlesfp")}]),angular.module("articles").factory("ArticlesList",["$resource",function($resource){return $resource("/api/articles/page/:page/count/:count")}]),angular.module("articles").factory("ArticlesLead",["$resource",function($resource){return $resource("api/articleslead")}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Artists",state:"artists",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","artists",{title:"List Artists",state:"artists.list"}),Menus.addSubMenuItem("topbar","artists",{title:"Create Artist",state:"artists.create",roles:["admin","teach"]})}angular.module("artists").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("artists",{"abstract":!0,url:"/artists",template:"<ui-view/>"}).state("artists.list",{url:"",templateUrl:"modules/artists/client/views/list-artists.client.view.html",controller:"ArtistsListController",controllerAs:"vm",data:{pageTitle:"Artists List"}}).state("artists.create",{url:"/create",templateUrl:"modules/artists/client/views/form-artist.client.view.html",controller:"ArtistsController",controllerAs:"vm",resolve:{artistResolve:newArtist},data:{roles:["teach","admin"],pageTitle:"Artists Create"}}).state("artists.edit",{url:"/:artistId/edit",templateUrl:"modules/artists/client/views/form-artist.client.view.html",controller:"ArtistsController",controllerAs:"vm",resolve:{artistResolve:getArtist},data:{roles:["teach","admin"],pageTitle:"Edit Artist {{ artistResolve.title }}"}}).state("artists.view",{url:"/:artistId",templateUrl:"modules/artists/client/views/view-artist.client.view.html",controller:"ArtistsController",controllerAs:"vm",resolve:{artistResolve:getArtist},data:{pageTitle:"Artist {{ artistResolve.title }}"}})}function getArtist($stateParams,ArtistsService){return ArtistsService.get({artistId:$stateParams.artistId}).$promise}function newArtist(ArtistsService){return new ArtistsService}angular.module("artists.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArtist.$inject=["$stateParams","ArtistsService"],newArtist.$inject=["ArtistsService"]}(),function(){function ArtistsController(PicturesByArtist,YearsService,$scope,$state,artist,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.artist.$remove($state.go("artists.list"))}function save(isValid){function successCallback(res){$state.go("artists.view",{artistId:res._id})}function errorCallback(res){vm.error=res.data.message}return vm.artist.yearEnrolled=$scope.yearData.selectedOption.year,vm.artist.house=$scope.house.selectedOption.name,isValid?void(vm.artist._id?vm.artist.$update(successCallback,errorCallback):vm.artist.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.artistForm"),!1)}var vm=this;vm.artist=artist,vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.wait=!1,$scope.totalItems=12,$scope.currentPage=1,$scope.maxSize=5,$scope.per_page=10,$scope.setPage=function(pageNo){$scope.currentPage=pageNo},$scope.pageChanged=function(){getPicturesByArtist()},vm.error=null,vm.form={},vm.remove=remove,vm.save=save;var today=new Date,yyyy=today.getFullYear();$scope.yearSelect=yyyy;var setYearOption=function(select){if(select){yyyy=select;for(var x=0;x<$scope.yearData.length;x++)if($scope.yearData[x].year===select){$scope.yearData.selectedOption=$scope.yearData[x];break}}},setHouseOption=function(house){for(var k=0;k<$scope.house.availableOptions.length;k++)if($scope.house.availableOptions[k].name===house){$scope.house.selectedOption=$scope.house.availableOptions[k];break}};$scope.yearData=[],$scope.yearData=YearsService.query(),$scope.yearData.$promise.then(function(result){$scope.yearData=result,vm.artist.yearEnrolled&&(yyyy=vm.artist.yearEnrolled),setYearOption(yyyy)}),$scope.house={availableOptions:[{name:"Conway"},{name:"Crispin"},{name:"Darlinghurst"},{name:"Haydon"},{name:"Mark"},{name:"McMahon"},{name:"Othmar"},{name:"Patrick"}]},vm.artist.house&&setHouseOption(vm.artist.house),$scope.artistChanged=function(){$scope.currentPage=1,$scope.totalItems=0,getPicturesByArtist()};var getPicturesByArtist=function(){vm.wait=!0,vm.pictures=PicturesByArtist.get({artistId:vm.artist._id,page:$scope.currentPage,count:$scope.totalItems}),vm.pictures.$promise.then(function(response){vm.wait=!1,vm.pictures=response.pictures,-1!==response.count&&($scope.totalItems=response.count)})}}angular.module("artists").controller("ArtistsController",ArtistsController),ArtistsController.$inject=["PicturesByArtist","YearsService","$scope","$state","artistResolve","$window","Authentication"]}(),function(){function ArtistsListController(ArtistYearEnrolled,$scope,YearsService,ArtistsService){var vm=this;$scope.yearData=YearsService.query(),$scope.yearData.$promise.then(function(result){$scope.yearData=result}),$scope.filterByYear=function(){vm.artists=ArtistYearEnrolled.query({yearEnrolled:$scope.yearData.selectedOption.year})}}angular.module("artists").controller("ArtistsListController",ArtistsListController),ArtistsListController.$inject=["ArtistYearEnrolled","$scope","YearsService","ArtistsService"]}(),function(){function ArtistsService($resource){return $resource("api/artists/:artistId",{artistId:"@_id"},{update:{method:"PUT"}})}angular.module("artists.services").factory("ArtistsService",ArtistsService),ArtistsService.$inject=["$resource"]}(),angular.module("artists").factory("ArtistYearEnrolled",["$resource",function($resource){return $resource("api/artistsyearenrolled/:yearEnrolled",{yearEnrolled:"@yearEnrolled"})}]),angular.module("chat").run(["Menus",function(Menus){}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),function(){function MenuConfig(Menus){Menus.addMenu("account",{roles:["user"]}),Menus.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),Menus.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"}),Menus.addSubMenuItem("account","settings",{title:"Manage Social Accounts",state:"settings.accounts"})}angular.module("core").run(MenuConfig),MenuConfig.$inject=["Menus"]}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path(),hasTrailingSlash=path.length>1&&"/"===path[path.length-1];if(hasTrailingSlash){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0,pageTitle:"Not-Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0,pageTitle:"Bad-Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}})}]),angular.module("core").controller("MyCarouselController",["spinnerService","ArticlesLead","ArticlesFrontPage","$interval","PicturesFrontPage","$scope","Authentication",function(spinnerService,ArticlesLead,ArticlesFrontPage,$interval,PicturesFrontPage,$scope,Authentication){$scope.authentication=Authentication,$scope.currentPage=1;var slideId=1;$scope.articles=ArticlesLead.get(),$scope.articles.$promise.then(function(response){$scope.title=response.articles[0].title,$scope.content=response.articles[0].content,$scope.picture=response.articles[0].picture,$scope.articles=response.articles}),$scope.newsArticles=ArticlesFrontPage.get(),$scope.newsArticles.$promise.then(function(response){$scope.newsArticles=response.articles}),$scope.myInterval=5e3;var slides=$scope.slides=[];$scope.addSlide=function(){slides.push({image:$scope.picture1,text:$scope.text,id:slideId})};var rotate=function(){return $scope.loading=!0,$scope.pictures=PicturesFrontPage.get({page:$scope.currentPage}),$scope.pictures.$promise.then(function(response){slides.length=0,$scope.pictures=response.pictures,-1!==response.count&&($scope.totalItems=response.count),$scope.currentPage===$scope.totalItems?$scope.currentPage=1:$scope.currentPage++;for(var i=0;i<response.pictures.length;i++)$scope.picture1=$scope.pictures[i].picture,$scope.text=$scope.pictures[i].title,slideId=i+1,$scope.addSlide();$scope.loading=!1}),!0};rotate()}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.accountMenu=Menus.getMenu("account").items[0],$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","ArticlesFrontPage","ArticlesLead",function($scope,Authentication,ArticlesFrontPage,ArticlesLead){function assignNewIndexesToSlides(indexes){for(var i=0,l=slides.length;l>i;i++)slides[i].id=indexes.pop()}function generateIndexesArray(){for(var indexes=[],i=0;currIndex>i;++i)indexes[i]=i;return shuffle(indexes)}function shuffle(array){var tmp,current,top=array.length;if(top)for(;--top;)current=Math.floor(Math.random()*(top+1)),tmp=array[current],array[current]=array[top],array[top]=tmp;return array}$scope.authentication=Authentication,$scope.wait=!0,$scope.currentPage=1;$scope.myInterval=5e3,$scope.noWrapSlides=!1,$scope.active=0;var slides=$scope.slides=[],currIndex=0;$scope.articles=ArticlesLead.get(),$scope.articles.$promise.then(function(response){$scope.title=response.articles[0].title,$scope.content=response.articles[0].content,$scope.picture=response.articles[0].picture,$scope.articles=response.articles,rotate()}),$scope.addSlide=function(){slides.push({image:$scope.picture1,text:$scope.text,id:currIndex++,_id:$scope._id})},$scope.randomize=function(){var indexes=generateIndexesArray();assignNewIndexesToSlides(indexes)};var rotate=function(){return $scope.wait=!0,$scope.pictures=ArticlesFrontPage.get(),$scope.pictures.$promise.then(function(response){slides.length=0,$scope.carousel=response.articles;for(var i=0;i<response.articles.length;i++)$scope.picture1=$scope.carousel[i].picture,$scope.text=$scope.carousel[i].title,$scope._id=$scope.carousel[i]._id,$scope.addSlide()}),$scope.wait=!1,!0}}]),function(){function pageTitle($rootScope,$timeout,$interpolate,$state){function link(scope,element){function listener(event,toState){var title=getTitle($state.$current);$timeout(function(){element.text(title)},0,!1)}function getTitle(currentState){var applicationCoreTitle="Online Art",workingState=currentState;if(currentState.data){workingState="undefined"!=typeof workingState.locals?workingState.locals.globals:workingState;var stateTitle=$interpolate(currentState.data.pageTitle)(workingState);return applicationCoreTitle+" - "+stateTitle}return applicationCoreTitle}$rootScope.$on("$stateChangeSuccess",listener)}var directive={retrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$timeout","$interpolate","$state"]}(),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw new Error("show-errors element has no child input elements with a 'name' attribute class");var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector","Authentication",function($q,$injector,Authentication){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Mediums",state:"mediums",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","mediums",{title:"List Mediums",state:"mediums.list"}),Menus.addSubMenuItem("topbar","mediums",{title:"Create Medium",state:"mediums.create",roles:["admin","teach"]})}angular.module("mediums").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("mediums",{"abstract":!0,url:"/mediums",template:"<ui-view/>"}).state("mediums.list",{url:"",templateUrl:"modules/mediums/client/views/list-mediums.client.view.html",controller:"MediumsListController",controllerAs:"vm",data:{pageTitle:"Mediums List"}}).state("mediums.create",{url:"/create",templateUrl:"modules/mediums/client/views/form-medium.client.view.html",controller:"MediumsController",controllerAs:"vm",resolve:{mediumResolve:newMedium},data:{roles:["user","admin"],pageTitle:"Mediums Create"}}).state("mediums.edit",{url:"/:mediumId/edit",templateUrl:"modules/mediums/client/views/form-medium.client.view.html",controller:"MediumsController",controllerAs:"vm",resolve:{mediumResolve:getMedium},data:{roles:["user","admin"],pageTitle:"Edit Medium {{ mediumResolve.title }}"}}).state("mediums.view",{url:"/:mediumId",templateUrl:"modules/mediums/client/views/view-medium.client.view.html",controller:"MediumsController",controllerAs:"vm",resolve:{mediumResolve:getMedium},data:{pageTitle:"Medium {{ mediumResolve.title }}"}})}function getMedium($stateParams,MediumsService){return MediumsService.get({mediumId:$stateParams.mediumId}).$promise}function newMedium(MediumsService){return new MediumsService}angular.module("mediums.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getMedium.$inject=["$stateParams","MediumsService"],newMedium.$inject=["MediumsService"]}(),function(){function MediumsListController(MediumsService){var vm=this;vm.mediums=MediumsService.query()}angular.module("mediums").controller("MediumsListController",MediumsListController),MediumsListController.$inject=["MediumsService"]}(),function(){function MediumsController($scope,$state,medium,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.medium.$remove($state.go("mediums.list"))}function save(isValid){function successCallback(res){$state.go("mediums.view",{mediumId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.medium._id?vm.medium.$update(successCallback,errorCallback):vm.medium.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.mediumForm"),!1)}var vm=this;vm.medium=medium,vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("mediums").controller("MediumsController",MediumsController),MediumsController.$inject=["$scope","$state","mediumResolve","$window","Authentication"]}(),function(){function MediumsService($resource){return $resource("api/mediums/:mediumId",{mediumId:"@_id"},{update:{method:"PUT"}})}angular.module("mediums.services").factory("MediumsService",MediumsService),MediumsService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Pictures",state:"pictures",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","pictures",{title:"List Pictures",state:"pictures.list"}),Menus.addSubMenuItem("topbar","pictures",{title:"Create Picture",state:"pictures.create",roles:["admin","teach"]})}angular.module("pictures").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("pictures",{"abstract":!0,url:"/pictures",template:"<ui-view/>"}).state("pictures.list",{url:"",templateUrl:"modules/pictures/client/views/list-pictures.client.view.html",controller:"PicturesListController",controllerAs:"vm",data:{pageTitle:"Pictures List"}}).state("pictures.create",{url:"/create",templateUrl:"modules/pictures/client/views/form-picture.client.view.html",controller:"PicturesController",controllerAs:"vm",resolve:{pictureResolve:newPicture},data:{roles:["user","admin"],pageTitle:"Pictures Create"}}).state("pictures.edit",{url:"/:pictureId/edit",templateUrl:"modules/pictures/client/views/form-picture.client.view.html",controller:"PicturesController",
controllerAs:"vm",resolve:{pictureResolve:getPicture},data:{roles:["user","admin"],pageTitle:"Edit Picture {{ pictureResolve.title }}"}}).state("pictures.view",{url:"/:pictureId",templateUrl:"modules/pictures/client/views/view-picture.client.view.html",controller:"PicturesController",controllerAs:"vm",resolve:{pictureResolve:getPicture},data:{pageTitle:"Picture {{ pictureResolve.title }}"}})}function getPicture($stateParams,PicturesService){return PicturesService.get({pictureId:$stateParams.pictureId}).$promise}function newPicture(PicturesService){return new PicturesService}angular.module("pictures.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPicture.$inject=["$stateParams","PicturesService"],newPicture.$inject=["PicturesService"]}(),function(){function PicturesListController(PicturesByYear,PicturesByArtist,PicturesPage,YearsService,ArtistYearEnrolled,PicturesService,$scope,ArtistsService){var vm=this;vm.wait=!1,$scope.maxSize=5,$scope.totalItems=1,$scope.currentPage=1,$scope.listedBy="getPictures",$scope.pageChanged=function(){"getPictures"===$scope.listedBy?$scope.getPictures():"getPicturesByArtist"===$scope.listedBy?getPicturesByArtist():"getPicturesByYear"===$scope.listedBy&&getPicturesByYear()},$scope.yearListData=[],$scope.yearListData=YearsService.query(),$scope.yearListData.$promise.then(function(result){$scope.yearData=result});var changeArtists=function(){$scope.dataArtist=[];var yearEnrolled=$scope.yearData.selectedOption.year;$scope.artists=ArtistYearEnrolled.query({yearEnrolled:yearEnrolled}),$scope.artists.$promise.then(function(result){$scope.dataArtist=result})};$scope.getPictures=function(){vm.wait=!0,vm.pictures=PicturesPage.get({page:$scope.currentPage}),vm.pictures.$promise.then(function(response){vm.wait=!1,vm.pictures=response.pictures,$scope.dataArtist=[],-1!==response.count&&($scope.totalItems=response.count),vm.wait=!1})},$scope.artistChanged=function(){$scope.currentPage=1,$scope.totalItems=0,getPicturesByArtist()};var getPicturesByArtist=function(){vm.wait=!0,$scope.listedBy="getPicturesByArtist",vm.pictures=PicturesByArtist.get({artistId:$scope.dataArtist.selectedOption._id,page:$scope.currentPage,count:$scope.totalItems}),vm.pictures.$promise.then(function(response){vm.wait=!1,vm.pictures=response.pictures,-1!==response.count&&($scope.totalItems=response.count)})};$scope.yearListChanged=function(){changeArtists(),$scope.currentPage=1,$scope.totalItems=0};var getPicturesByYear=function(){vm.wait=!0,$scope.listedBy="getPicturesByYear",vm.pictures=PicturesByYear.get({year:$scope.yearListData.selectedOption.year,page:$scope.currentPage,count:$scope.totalItems}),vm.pictures.$promise.then(function(response){vm.pictures=response.pictures,-1!==response.count&&($scope.totalItems=response.count),vm.wait=!1})}}angular.module("pictures").controller("PicturesListController",PicturesListController),PicturesListController.$inject=["PicturesByYear","PicturesByArtist","PicturesPage","YearsService","ArtistYearEnrolled","PicturesService","$scope","ArtistsService"]}(),function(){function PicturesController(ArtistYearEnrolled,SubYears,YearsService,MediumsService,$scope,$timeout,$state,picture,$window,Authentication,FileUploader){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.picture.$remove($state.go("pictures.list"))}function save(isValid){function successCallback(res){$state.go("pictures.view",{pictureId:res._id})}function errorCallback(res){vm.error=res.data.message}return vm.picture.artist=$scope.dataArtist.selectedOption._id,vm.picture.artistName=$scope.dataArtist.selectedOption.name,vm.picture.year=$scope.yearData.selectedOption.year,vm.picture.medium=$scope.data.selectedOption.title,vm.picture.subject=$scope.dataSubject.selectedOption._id,vm.picture.teacher=$scope.dataSubject.selectedOption.teacher,vm.picture.subjectName=$scope.dataSubject.selectedOption.title,vm.picture.semester=$scope.semesterData.selectedOption.semester,vm.picture.yearLevel=$scope.dataSubject.selectedOption.yearLevel,isValid?void(vm.picture._id?vm.picture.$update(successCallback,errorCallback):vm.picture.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.pictureForm"),!1)}function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fre){$timeout(function(){var sizePicture=Math.ceil(fre.target.result.length/1400);sizePicture>100?alert("Picture size is "+sizePicture+" KBs Max size is 100 KBs"):vm.picture.picture=fre.target.result},0)}}}function onSuccessItem(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,cancelUpload()}function onErrorItem(fileItem,response,status,headers){cancelUpload(),vm.error=response.message}function cancelUpload(){vm.uploader.clearQueue(),vm.imageURL=vm.user.profileImageURL}var vm=this;vm.picture=picture,vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.error=null,vm.form={},vm.remove=remove,vm.save=save;var today=new Date,yyyy=today.getFullYear(),setYearOption=function(select){if(select){yyyy=select;for(var x=0;x<$scope.yearData.length;x++)if($scope.yearData[x].year===select){$scope.yearData.selectedOption=$scope.yearData[x];break}}};if($scope.yearData=YearsService.query(),$scope.yearData.$promise.then(function(result){$scope.yearData=result,vm.picture.year&&setYearOption(vm.picture.year)}),$scope.semesterData={availableOptions:[{semester:1},{semester:2}],selectedOption:{semester:1}},$scope.medium=[],$scope.data=[],$scope.medium=MediumsService.query(),$scope.medium.$promise.then(function(result){if($scope.data=result,vm.picture.medium)for(var x=0;x<$scope.data.length;x++)$scope.data[x].title==vm.picture.medium&&($scope.data.selectedOption=$scope.data[x]);else $scope.data.selectedOption=$scope.data[0]}),$scope.load=function(){$scope.dataArtist=[],$scope.dataSubject=[],$scope.semesterSelect=$scope.semesterData.selectedOption.semester,$scope.yearSelect=$scope.yearData.selectedOption.year,$scope.subjects=SubYears.query({year:$scope.yearSelect,semester:$scope.semesterSelect}),$scope.subjects.$promise.then(function(result){$scope.dataSubject=result})},$scope.changeArtists=function(){$scope.dataArtist=[];var yearEnrolled=$scope.yearData.selectedOption.year+(7-$scope.dataSubject.selectedOption.yearLevel);$scope.artists=ArtistYearEnrolled.query({yearEnrolled:yearEnrolled}),$scope.artists.$promise.then(function(){for(var x=0;x<$scope.artists.length;x++)$scope.artists[x].active&&$scope.dataArtist.push($scope.artists[x])})},vm.picture._id){if($scope.dataArtist=[],$scope.dataSubject=[],vm.picture.yearLevel){var yearEnrolled=vm.picture.year+(7-vm.picture.yearLevel);$scope.artists=ArtistYearEnrolled.query({yearEnrolled:yearEnrolled}),$scope.artists.$promise.then(function(result){for(var c=0;c<result.length;c++)result[c].active&&$scope.dataArtist.push(result[c]);for(var z=0;z<$scope.dataArtist.length;z++)if($scope.dataArtist[z].name===vm.picture.artistName){$scope.dataArtist.selectedOption=$scope.dataArtist[z];break}})}if(vm.picture.semester)for(var len=$scope.semesterData.availableOptions.length,k=0;len>k;k++)if($scope.semesterData.availableOptions[k].semester===vm.picture.semester){$scope.semesterData.selectedOption=$scope.semesterData.availableOptions[k];break}$scope.subjects=SubYears.query({year:vm.picture.year,semester:vm.picture.semester}),$scope.subjects.$promise.then(function(result){$scope.dataSubject=result;for(var lenSub=$scope.dataSubject.length,a=0;lenSub>a;a++)if($scope.dataSubject[a]._id===vm.picture.subject){$scope.dataSubject.selectedOption=$scope.dataSubject[a];break}})}$scope.addPicture=function(element){if(element.files&&element.files[0]){var FR=new FileReader;FR.onload=function(e){$scope.$apply(function($scope){vm.picture.picture=e.target.result})},FR.readAsDataURL(element.files[0])}},vm.cancelUpload=cancelUpload,vm.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}})}angular.module("pictures").controller("PicturesController",PicturesController),PicturesController.$inject=["ArtistYearEnrolled","SubYears","YearsService","MediumsService","$scope","$timeout","$state","pictureResolve","$window","Authentication","FileUploader"]}(),function(){function PicturesService($resource){return $resource("api/pictures/:pictureId",{pictureId:"@_id"},{update:{method:"PUT"}})}angular.module("pictures.services").factory("PicturesService",PicturesService),PicturesService.$inject=["$resource"]}(),angular.module("pictures").factory("PicturesPage",["$resource",function($resource){return $resource("api/picturespage/:page",{page:"@page"})}]),angular.module("pictures").factory("PicturesFrontPage",["$resource",function($resource){return $resource("api/picturesfrontpage/:page",{page:"@page"})}]),angular.module("pictures").factory("PicturesByArtist",["$resource",function($resource){return $resource("api/picturesbyartist/:artistId/page/:page/count/:count",{artist:"@artistId",page:"@page"})}]),angular.module("pictures").factory("PicturesByYear",["$resource",function($resource){return $resource("api/picturesbyyear/:year/page/:page/count/:count",{artist:"@year",page:"@page",count:"@count"})}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Subjects",state:"subjects",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","subjects",{title:"List Subjects",state:"subjects.list"}),Menus.addSubMenuItem("topbar","subjects",{title:"Create Subject",state:"subjects.create",roles:["admin","teach"]})}angular.module("subjects").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("subjects",{"abstract":!0,url:"/subjects",template:"<ui-view/>"}).state("subjects.list",{url:"",templateUrl:"modules/subjects/client/views/list-subjects.client.view.html",controller:"SubjectsListController",controllerAs:"vm",data:{pageTitle:"Subjects List"}}).state("subjects.create",{url:"/create",templateUrl:"modules/subjects/client/views/form-subject.client.view.html",controller:"SubjectsController",controllerAs:"vm",resolve:{subjectResolve:newSubject},data:{roles:["teach","admin"],pageTitle:"Subjects Create"}}).state("subjects.edit",{url:"/:subjectId/edit",templateUrl:"modules/subjects/client/views/form-subject.client.view.html",controller:"SubjectsController",controllerAs:"vm",resolve:{subjectResolve:getSubject},data:{roles:["teach","admin"],pageTitle:"Edit Subject {{ subjectResolve.title }}"}}).state("subjects.view",{url:"/:subjectId",templateUrl:"modules/subjects/client/views/view-subject.client.view.html",controller:"SubjectsController",controllerAs:"vm",resolve:{subjectResolve:getSubject},data:{pageTitle:"Subject {{ subjectResolve.title }}"}})}function getSubject($stateParams,SubjectsService){return SubjectsService.get({subjectId:$stateParams.subjectId}).$promise}function newSubject(SubjectsService){return new SubjectsService}angular.module("subjects.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getSubject.$inject=["$stateParams","SubjectsService"],newSubject.$inject=["SubjectsService"]}(),function(){function SubjectsListController($scope,SubYears,SubjectsService,YearsService){var vm=this;$scope.yearData=YearsService.query(),$scope.yearData.$promise.then(function(result){$scope.yearData=result}),$scope.semesterData={availableOptions:[{semester:1},{semester:2}],selectedOption:{semester:1}},$scope.listSubjects=function(){$scope.yearSelect=$scope.yearData.selectedOption.year,$scope.semesterSelect=$scope.semesterData.selectedOption.semester,$scope.subjects=SubYears.query({year:$scope.yearData.selectedOption.year,semester:$scope.semesterData.selectedOption.semester}),$scope.subjects.$promise.then(function(response){vm.wait=!1,vm.subjects=response,-1!==response.count&&($scope.totalItems=response.count)})}}angular.module("subjects").controller("SubjectsListController",SubjectsListController),SubjectsListController.$inject=["$scope","SubYears","SubjectsService","YearsService"]}(),function(){function SubjectsController(SubjectsService,YearsService,TeachersService,ArtistYearEnrolled,SubYears,$scope,$state,subject,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.subject.$remove($state.go("subjects.list"))}function save(isValid){function successCallback(res){$state.go("subjects.view",{subjectId:res._id})}function errorCallback(res){vm.error=res.data.message}vm.subject.yearLevel=$scope.yearLevelData.selectedOption.yearLevel,vm.subject.year=$scope.yearData.selectedOption.year,vm.subject.semester=$scope.semesterData.selectedOption.semester,vm.subject.teacher=$scope.teacherData.selectedOption.title;for(var i=0;i<$scope.artists.length;i++)if($scope.artists[i].selected){var find=vm.subject.artists.indexOf($scope.artists[i]._id);-1===find&&vm.subject.artists.push($scope.artists[i]._id)}else{var at=vm.subject.artists.indexOf($scope.artists[i]._id);-1!==at&&vm.subject.artists.splice(at,1)}return isValid?void(vm.subject._id?vm.subject.$update(successCallback,errorCallback):vm.subject.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.subjectForm"),!1)}var vm=this;vm.subject=subject,vm.subject.artists||(vm.subject.artists=[]),vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.teacher=TeachersService.query(),$scope.teacher.$promise.then(function(result){if($scope.teacherData=result,vm.subject.teacher)for(var j=0;j<$scope.teacherData.length;j++)if($scope.teacherData[j].title===vm.subject.teacher){$scope.teacherData.selectedOption=$scope.teacherData[j];break}}),$scope.yearSelect="All",$scope.semesterSelect="All",$scope.arrayArtists=[],$scope.artists=[];var today=new Date,yyyy=today.getFullYear(),setYearOption=function(select){if(select){yyyy=select;for(var x=0;x<$scope.yearData.length;x++)if($scope.yearData[x].year===select){$scope.yearData.selectedOption=$scope.yearData[x];break}}};if($scope.yearData=YearsService.query(),$scope.yearData.$promise.then(function(result){$scope.yearData=result,vm.subject.year&&setYearOption(vm.subject.year)}),$scope.yearLevelData={availableOptions:[{yearLevel:7},{yearLevel:8},{yearLevel:9},{yearLevel:10},{yearLevel:11},{yearLevel:12}],selectedOption:{yearLevel:7}},$scope.semesterData={availableOptions:[{semester:1},{semester:2}],selectedOption:{semester:1}},vm.subject._id){if(vm.subject.yearLevel){var yearEnrolled=vm.subject.year+(7-vm.subject.yearLevel);$scope.artists=ArtistYearEnrolled.query({yearEnrolled:yearEnrolled}),$scope.artists.$promise.then(function(){for(var y=0;y<$scope.artists.length;y++)vm.subject.artists.indexOf($scope.artists[y]._id)>-1&&($scope.artists[y].selected=!0)});for(var l=$scope.yearLevelData.availableOptions.length,i=0;l>i;i++)if($scope.yearLevelData.availableOptions[i].yearLevel===vm.subject.yearLevel){$scope.yearLevelData.selectedOption=$scope.yearLevelData.availableOptions[i];break}}if(vm.subject.semester)for(var len=$scope.semesterData.availableOptions.length,k=0;len>k;k++)if($scope.semesterData.availableOptions[k].semester===vm.subject.semester){$scope.semesterData.selectedOption=$scope.semesterData.availableOptions[k];break}}$scope.findArtistForSubject=function(){$scope.subject=SubjectsService.get({subjectId:vm.subject._id}),$scope.subject.$promise.then(function(){var yearEnrolled=$scope.subject.year+(7-$scope.subject.yearLevel);$scope.artists=ArtistYearEnrolled.query({yearEnrolled:yearEnrolled})})},$scope.changeArtists=function(){var yearEnrolled=$scope.yearData.selectedOption.year+(7-$scope.yearLevelData.selectedOption.yearLevel);$scope.artists=ArtistYearEnrolled.query({yearEnrolled:yearEnrolled}),$scope.artists.$promise.then(function(){for(var x=0;x<$scope.artists.length;x++)$scope.subject.artists.indexOf($scope.artists[x]._id)>-1&&($scope.artists[x].selected=!0)})}}angular.module("subjects").controller("SubjectsController",SubjectsController),SubjectsController.$inject=["SubjectsService","YearsService","TeachersService","ArtistYearEnrolled","SubYears","$scope","$state","subjectResolve","$window","Authentication"]}(),function(){function SubjectsService($resource){return $resource("api/subjects/:subjectId",{subjectId:"@_id"},{update:{method:"PUT"}})}angular.module("subjects.services").factory("SubjectsService",SubjectsService),SubjectsService.$inject=["$resource"]}(),angular.module("subjects").factory("SubYears",["$resource",function($resource){return $resource("api/year/:year/semester/:semester",{year:"@year",semester:"@semseter"})}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Teachers",state:"teachers",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","teachers",{title:"List Teachers",state:"teachers.list"}),Menus.addSubMenuItem("topbar","teachers",{title:"Create Teacher",state:"teachers.create",roles:["admin","teach"]})}angular.module("teachers").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("teachers",{"abstract":!0,url:"/teachers",template:"<ui-view/>"}).state("teachers.list",{url:"",templateUrl:"modules/teachers/client/views/list-teachers.client.view.html",controller:"TeachersListController",controllerAs:"vm",data:{pageTitle:"Teachers List"}}).state("teachers.create",{url:"/create",templateUrl:"modules/teachers/client/views/form-teacher.client.view.html",controller:"TeachersController",controllerAs:"vm",resolve:{teacherResolve:newTeacher},data:{roles:["user","admin"],pageTitle:"Teachers Create"}}).state("teachers.edit",{url:"/:teacherId/edit",templateUrl:"modules/teachers/client/views/form-teacher.client.view.html",controller:"TeachersController",controllerAs:"vm",resolve:{teacherResolve:getTeacher},data:{roles:["user","admin"],pageTitle:"Edit Teacher {{ teacherResolve.title }}"}}).state("teachers.view",{url:"/:teacherId",templateUrl:"modules/teachers/client/views/view-teacher.client.view.html",controller:"TeachersController",controllerAs:"vm",resolve:{teacherResolve:getTeacher},data:{pageTitle:"Teacher {{ teacherResolve.title }}"}})}function getTeacher($stateParams,TeachersService){return TeachersService.get({teacherId:$stateParams.teacherId}).$promise}function newTeacher(TeachersService){return new TeachersService}angular.module("teachers.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getTeacher.$inject=["$stateParams","TeachersService"],newTeacher.$inject=["TeachersService"]}(),function(){function TeachersListController(TeachersService){var vm=this;vm.teachers=TeachersService.query()}angular.module("teachers").controller("TeachersListController",TeachersListController),TeachersListController.$inject=["TeachersService"]}(),function(){function TeachersController($scope,$state,teacher,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.teacher.$remove($state.go("teachers.list"))}function save(isValid){function successCallback(res){$state.go("teachers.view",{teacherId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.teacher._id?vm.teacher.$update(successCallback,errorCallback):vm.teacher.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.teacherForm"),!1)}var vm=this;vm.teacher=teacher,vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("teachers").controller("TeachersController",TeachersController),TeachersController.$inject=["$scope","$state","teacherResolve","$window","Authentication"]}(),function(){function TeachersService($resource){return $resource("api/teachers/:teacherId",{teacherId:"@_id"},{update:{method:"PUT"}})}angular.module("teachers.services").factory("TeachersService",TeachersService),TeachersService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),function(){function routeConfig($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html",controller:"SocialAccountsController",controllerAs:"vm",data:{pageTitle:"Settings accounts"}}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}(),function(){function UserController($scope,$state,$window,Authentication,user){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){vm.error=errorResponse.data.message})}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve"]}(),function(){function AuthenticationController($scope,$state,$http,$location,$window,Authentication,PasswordValidator){function signup(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signup",vm.credentials).success(function(response){vm.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function signin(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signin",vm.credentials).success(function(response){vm.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.error=$location.search().err,vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","$http","$location","$window","Authentication","PasswordValidator"]}(),function(){function PasswordController($scope,$stateParams,$http,$location,Authentication,PasswordValidator){function askForPasswordReset(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/forgot",vm.credentials).success(function(response){vm.credentials=null,vm.success=response.message}).error(function(response){vm.credentials=null,vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,vm.passwordDetails).success(function(response){vm.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","$http","$location","Authentication","PasswordValidator"]}(),function(){function ChangePasswordController($scope,$http,Authentication,PasswordValidator){function changeUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/users/password",vm.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","vm.passwordForm"),vm.success=!0,vm.passwordDetails=null}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","PasswordValidator"]}(),function(){function ChangeProfilePictureController($scope,$timeout,$window,Authentication,FileUploader){function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fre){$timeout(function(){vm.imageURL=fre.target.result},0)}}}function onSuccessItem(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,cancelUpload()}function onErrorItem(fileItem,response,status,headers){cancelUpload(),vm.error=response.message}function uploadProfilePicture(){vm.success=vm.error=null,vm.uploader.uploadAll()}function cancelUpload(){vm.uploader.clearQueue(),vm.imageURL=vm.user.profileImageURL}var vm=this;vm.user=Authentication.user,vm.imageURL=vm.user.profileImageURL,vm.uploadProfilePicture=uploadProfilePicture,vm.cancelUpload=cancelUpload,vm.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}})}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$scope","$timeout","$window","Authentication","FileUploader"]}(),function(){function EditProfileController($scope,$http,$location,UsersService,Authentication){function updateUserProfile(isValid){if(vm.success=vm.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new UsersService(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile;
}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication"]}(),function(){function SocialAccountsController($scope,$http,Authentication){function hasConnectedAdditionalSocialAccounts(){return $scope.user.additionalProvidersData&&Object.keys($scope.user.additionalProvidersData).length}function isConnectedSocialAccount(provider){return vm.user.provider===provider||vm.user.additionalProvidersData&&vm.user.additionalProvidersData[provider]}function removeUserSocialAccount(provider){vm.success=vm.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){vm.success=!0,vm.user=Authentication.user=response}).error(function(response){vm.error=response.message})}var vm=this;vm.user=Authentication.user,vm.hasConnectedAdditionalSocialAccounts=hasConnectedAdditionalSocialAccounts,vm.isConnectedSocialAccount=isConnectedSocialAccount,vm.removeUserSocialAccount=removeUserSocialAccount}angular.module("users").controller("SocialAccountsController",SocialAccountsController),SocialAccountsController.$inject=["$scope","$http","Authentication"]}(),function(){function SettingsController($scope,Authentication){var vm=this;vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}(),function(){function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}(),function(){function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}(),function(){function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase)}(),function(){function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}(),function(){function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with 10 or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}(),function(){function UsersService($resource){return $resource("api/users",{},{update:{method:"PUT"}})}function AdminService($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Years",state:"years",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","years",{title:"List Years",state:"years.list"}),Menus.addSubMenuItem("topbar","years",{title:"Create Year",state:"years.create",roles:["admin","teach"]})}angular.module("years").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("years",{"abstract":!0,url:"/years",template:"<ui-view/>"}).state("years.list",{url:"",templateUrl:"modules/years/client/views/list-years.client.view.html",controller:"YearsListController",controllerAs:"vm",data:{pageTitle:"Years List"}}).state("years.create",{url:"/create",templateUrl:"modules/years/client/views/form-year.client.view.html",controller:"YearsController",controllerAs:"vm",resolve:{yearResolve:newYear},data:{roles:["user","admin"],pageTitle:"Years Create"}}).state("years.edit",{url:"/:yearId/edit",templateUrl:"modules/years/client/views/form-year.client.view.html",controller:"YearsController",controllerAs:"vm",resolve:{yearResolve:getYear},data:{roles:["user","admin"],pageTitle:"Edit Year {{ yearResolve.year }}"}}).state("years.view",{url:"/:yearId",templateUrl:"modules/years/client/views/view-year.client.view.html",controller:"YearsController",controllerAs:"vm",resolve:{yearResolve:getYear},data:{pageTitle:"Year {{ yearResolve.year }}"}})}function getYear($stateParams,YearsService){return YearsService.get({yearId:$stateParams.yearId}).$promise}function newYear(YearsService){return new YearsService}angular.module("years.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getYear.$inject=["$stateParams","YearsService"],newYear.$inject=["YearsService"]}(),function(){function YearsListController(YearsService){var vm=this;vm.years=YearsService.query()}angular.module("years").controller("YearsListController",YearsListController),YearsListController.$inject=["YearsService"]}(),function(){function YearsController($scope,$state,year,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.year.$remove($state.go("years.list"))}function save(isValid){function successCallback(res){$state.go("years.view",{yearId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.year._id?vm.year.$update(successCallback,errorCallback):vm.year.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.yearForm"),!1)}var vm=this;vm.year=year,vm.authentication=Authentication,vm.showUser=!1,""!=vm.authentication.user&&(1==vm.authentication.user.roles.indexOf("admin")||1==vm.authentication.user.roles.indexOf("teach"))&&(vm.showUser=!0),vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("years").controller("YearsController",YearsController),YearsController.$inject=["$scope","$state","yearResolve","$window","Authentication"]}(),function(){function YearsService($resource){return $resource("api/years/:yearId",{yearId:"@_id"},{update:{method:"PUT"}})}angular.module("years.services").factory("YearsService",YearsService),YearsService.$inject=["$resource"]}();